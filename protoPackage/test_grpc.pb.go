// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: protoPackage/test.proto

package protoPackage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressBookClient is the client API for AddressBook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressBookClient interface {
	GetStudentDetails(ctx context.Context, in *GetDetailsReq, opts ...grpc.CallOption) (*Student, error)
	AddPerson(ctx context.Context, in *AddPersonReq, opts ...grpc.CallOption) (*Empty, error)
}

type addressBookClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressBookClient(cc grpc.ClientConnInterface) AddressBookClient {
	return &addressBookClient{cc}
}

func (c *addressBookClient) GetStudentDetails(ctx context.Context, in *GetDetailsReq, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/protoPackage.AddressBook/GetStudentDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressBookClient) AddPerson(ctx context.Context, in *AddPersonReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protoPackage.AddressBook/AddPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressBookServer is the server API for AddressBook service.
// All implementations should embed UnimplementedAddressBookServer
// for forward compatibility
type AddressBookServer interface {
	GetStudentDetails(context.Context, *GetDetailsReq) (*Student, error)
	AddPerson(context.Context, *AddPersonReq) (*Empty, error)
}

// UnimplementedAddressBookServer should be embedded to have forward compatible implementations.
type UnimplementedAddressBookServer struct {
}

func (UnimplementedAddressBookServer) GetStudentDetails(context.Context, *GetDetailsReq) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentDetails not implemented")
}
func (UnimplementedAddressBookServer) AddPerson(context.Context, *AddPersonReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}

// UnsafeAddressBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressBookServer will
// result in compilation errors.
type UnsafeAddressBookServer interface {
	mustEmbedUnimplementedAddressBookServer()
}

func RegisterAddressBookServer(s grpc.ServiceRegistrar, srv AddressBookServer) {
	s.RegisterService(&AddressBook_ServiceDesc, srv)
}

func _AddressBook_GetStudentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServer).GetStudentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoPackage.AddressBook/GetStudentDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServer).GetStudentDetails(ctx, req.(*GetDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressBook_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPersonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoPackage.AddressBook/AddPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServer).AddPerson(ctx, req.(*AddPersonReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressBook_ServiceDesc is the grpc.ServiceDesc for AddressBook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressBook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoPackage.AddressBook",
	HandlerType: (*AddressBookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentDetails",
			Handler:    _AddressBook_GetStudentDetails_Handler,
		},
		{
			MethodName: "AddPerson",
			Handler:    _AddressBook_AddPerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoPackage/test.proto",
}
